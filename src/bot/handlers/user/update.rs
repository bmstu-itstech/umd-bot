use chrono::NaiveDate;
use serde::{Deserialize, Serialize};
use teloxide::dispatching::dialogue::InMemStorage;
use teloxide::dispatching::{UpdateHandler, dialogue};
use teloxide::macros::BotCommands;
use teloxide::prelude::*;
use teloxide::types::{KeyboardRemove, ParseMode};

use crate::bot::handlers::fsm::HandlerResult;
use crate::bot::handlers::keyboards::{
    self, make_citizenship_keyboard, make_field_selection_keyboard,
};
use crate::domain::Error;
use crate::domain::models::{Citizenship, OnlyCyrillic, OnlyLatin, UserID};
use crate::usecases::{CheckRegisteredUseCase, UpdateUserUseCase};

#[derive(BotCommands, Clone)]
#[command(description = "–ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è")]
enum UpdateCommand {
    #[command(rename = "update", description = "–æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")]
    Update,

    #[command(rename = "cancel", description = "–æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é")]
    Cancel,
}

#[derive(Default, Clone, Serialize, Deserialize)]
pub enum UpdateState {
    #[default]
    Start,
    AwaitingFieldSelection,
    AwaitingFullNameLat,
    AwaitingFullNameCyr,
    AwaitingCitizenship,
    AwaitingOtherCitizenship,
    AwaitingArrivalDate,
}

pub type UpdateDialogue = Dialogue<UpdateState, InMemStorage<UpdateState>>;

async fn handle_update_command(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: CheckRegisteredUseCase,
) -> HandlerResult {
    let registered = use_case.is_registered(UserID::new(msg.chat.id.0)).await?;
    if !registered {
        bot.send_message(
            msg.chat.id,
            "‚ö†Ô∏è <b>–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!</b>\n\
             –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        )
        .parse_mode(ParseMode::Html)
        .await?;
        return Ok(());
    }
    bot.send_message(msg.chat.id, "üîÑ <b>–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å?</b>")
        .parse_mode(ParseMode::Html)
        .reply_markup(make_field_selection_keyboard())
        .await?;
    dialogue.update(UpdateState::AwaitingFieldSelection).await?;
    Ok(())
}

async fn receive_field_selection(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
) -> HandlerResult {
    match msg.text() {
        Some(text) => match text {
            keyboards::FIELD_NAME_LAT_BTN => {
                bot.send_message(
                    msg.chat.id,
                    "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –ª–∞—Ç–∏–Ω–∏—Ü–µ–π</b>\n\
                     –ü—Ä–∏–º–µ—Ä: <i>Ivanov Ivan Ivanovich</i>",
                )
                .parse_mode(ParseMode::Html)
                .await?;
                dialogue.update(UpdateState::AwaitingFullNameLat).await?;
            }
            keyboards::FIELD_NAME_CYR_BTN => {
                bot.send_message(
                    msg.chat.id,
                    "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π</b>\n\
                     –ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
                )
                .parse_mode(ParseMode::Html)
                .await?;
                dialogue.update(UpdateState::AwaitingFullNameCyr).await?;
            }
            keyboards::FIELD_CITIZENSHIP_BTN => {
                bot.send_message(msg.chat.id, "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</b>")
                    .parse_mode(ParseMode::Html)
                    .reply_markup(make_citizenship_keyboard())
                    .await?;
                dialogue.update(UpdateState::AwaitingCitizenship).await?;
            }
            keyboards::FIELD_ARRIVAL_DATE_BTN => {
                bot.send_message(
                    msg.chat.id,
                    "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è</b>\n\
                    –í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
                )
                .parse_mode(ParseMode::Html)
                .await?;
                dialogue.update(UpdateState::AwaitingArrivalDate).await?;
            }
            _ => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞.",
                )
                .parse_mode(ParseMode::Html)
                .reply_markup(make_field_selection_keyboard())
                .await?;
            }
        },
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .reply_markup(make_field_selection_keyboard())
                .await?;
        }
    }
    Ok(())
}

async fn receive_full_name_lat(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: UpdateUserUseCase,
) -> HandlerResult {
    match msg.text() {
        Some(text) => match OnlyLatin::new(text) {
            Ok(name) => {
                use_case.update_name_lat(msg.chat.id.0, name).await?;
                bot.send_message(msg.chat.id, "‚úÖ –ò–º—è –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
                    .await?;
                dialogue.exit().await?;
            }
            Err(_) => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                     –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                .parse_mode(ParseMode::Html)
                .await?;
            }
        },
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
        }
    }
    Ok(())
}

async fn receive_full_name_cyr(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: UpdateUserUseCase,
) -> HandlerResult {
    match msg.text() {
        Some(text) => match OnlyCyrillic::new(text) {
            Ok(name) => {
                use_case.update_name_cyr(msg.chat.id.0, name).await?;
                bot.send_message(msg.chat.id, "‚úÖ –ò–º—è –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –∏–∑–º–µ–Ω–µ–Ω–æ!")
                    .await?;
                dialogue.exit().await?;
            }
            Err(_) => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                     –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                .parse_mode(ParseMode::Html)
                .await?;
            }
        },
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
        }
    }
    Ok(())
}

async fn receive_citizenship(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: UpdateUserUseCase,
) -> HandlerResult {
    let text = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .reply_markup(make_citizenship_keyboard())
                .await?;
            return Ok(());
        }
    };

    let citizenship = match text {
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω" => Citizenship::Tajikistan,
        "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω" => Citizenship::Uzbekistan,
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" => Citizenship::Kazakhstan,
        "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω" => Citizenship::Kyrgyzstan,
        "–ê—Ä–º–µ–Ω–∏—è" => Citizenship::Armenia,
        "–ë–µ–ª–∞—Ä—É—Å—å" => Citizenship::Belarus,
        "–£–∫—Ä–∞–∏–Ω–∞" => Citizenship::Ukraine,
        "–î—Ä—É–≥–æ–µ" => {
            bot.send_message(msg.chat.id, "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</b>")
                .parse_mode(ParseMode::Html)
                .reply_markup(KeyboardRemove::new())
                .await?;
            dialogue
                .update(UpdateState::AwaitingOtherCitizenship)
                .await?;
            return Ok(());
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞.",
            )
            .parse_mode(ParseMode::Html)
            .reply_markup(make_citizenship_keyboard())
            .await?;
            return Ok(());
        }
    };
    use_case
        .update_citizenship(msg.chat.id.0, citizenship)
        .await?;
    bot.send_message(msg.chat.id, "‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        .reply_markup(KeyboardRemove::new())
        .await?;
    dialogue.exit().await?;
    Ok(())
}

async fn receive_other_citizenship(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: UpdateUserUseCase,
) -> HandlerResult {
    let other = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
            return Ok(());
        }
    };
    let citizenship = Citizenship::Other(other.to_string());
    use_case
        .update_citizenship(msg.chat.id.0, citizenship)
        .await?;
    bot.send_message(msg.chat.id, "‚úÖ –ì—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ –∏–∑–º–µ–Ω–µ–Ω–æ!")
        .reply_markup(KeyboardRemove::new())
        .await?;
    dialogue.exit().await?;
    Ok(())
}

async fn receive_arrival_date(
    bot: Bot,
    msg: Message,
    dialogue: UpdateDialogue,
    use_case: UpdateUserUseCase,
) -> HandlerResult {
    let date_str = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
            return Ok(());
        }
    };
    let arrival_date = match NaiveDate::parse_from_str(date_str, "%d.%m.%Y") {
        Ok(arrival_date) => arrival_date,
        Err(_) => {
            bot.send_message(
                msg.chat.id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\
                –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
            )
            .parse_mode(ParseMode::Html)
            .await?;
            return Ok(());
        }
    };
    use_case
        .update_arrival_date(msg.chat.id.0, arrival_date)
        .await?;
    bot.send_message(msg.chat.id, "‚úÖ –î–∞—Ç–∞ –ø—Ä–∏–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞!")
        .await?;
    dialogue.exit().await?;
    Ok(())
}

async fn handle_cancel_command(bot: Bot, msg: Message, dialogue: UpdateDialogue) -> HandlerResult {
    bot.send_message(msg.chat.id, "‚ùå –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        .reply_markup(KeyboardRemove::new())
        .await?;
    dialogue.exit().await?;
    Ok(())
}

pub fn update_schema() -> UpdateHandler<Error> {
    use dptree::case;

    let command_handler = teloxide::filter_command::<UpdateCommand, _>()
        .branch(case![UpdateCommand::Update].endpoint(handle_update_command))
        .branch(case![UpdateCommand::Cancel].endpoint(handle_cancel_command));

    let message_handler = Update::filter_message()
        .branch(command_handler)
        .branch(case![UpdateState::AwaitingFieldSelection].endpoint(receive_field_selection))
        .branch(case![UpdateState::AwaitingFullNameLat].endpoint(receive_full_name_lat))
        .branch(case![UpdateState::AwaitingFullNameCyr].endpoint(receive_full_name_cyr))
        .branch(case![UpdateState::AwaitingCitizenship].endpoint(receive_citizenship))
        .branch(case![UpdateState::AwaitingOtherCitizenship].endpoint(receive_other_citizenship))
        .branch(case![UpdateState::AwaitingArrivalDate].endpoint(receive_arrival_date));

    dialogue::enter::<Update, InMemStorage<UpdateState>, UpdateState, _>().branch(message_handler)
}
