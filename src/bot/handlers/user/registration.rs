use crate::bot::handlers::fsm::HandlerResult;
use crate::bot::handlers::keyboards::{
    AGREEMENT_BTN, make_agreement_keyboard, make_citizenship_keyboard,
};
use crate::domain::Error;
use crate::domain::models::{Citizenship, OnlyCyrillic, OnlyLatin, UserID, Username};
use crate::usecases::{CheckRegisteredUseCase, RegisterUserRequest, RegisterUserUseCase};
use chrono::NaiveDate;
use serde::{Deserialize, Serialize};
use teloxide::dispatching::dialogue::InMemStorage;
use teloxide::dispatching::{UpdateHandler, dialogue};
use teloxide::macros::BotCommands;
use teloxide::prelude::*;
use teloxide::types::{KeyboardRemove, ParseMode};

#[derive(BotCommands, Clone)]
#[command(description = "–ö–æ–º–∞–Ω–¥—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")]
enum RegistrationCommand {
    #[command(rename = "start", description = "–Ω–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    Start,

    #[command(rename = "cancel", description = "–æ—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")]
    Cancel,
}

#[derive(Default, Clone, Serialize, Deserialize)]
pub enum RegistrationState {
    #[default]
    Start,
    AwaitingPDAgreement,
    AwaitingFullNameLat,
    AwaitingFullNameCyr(OnlyLatin),
    AwaitingCitizenship(OnlyLatin, OnlyCyrillic),
    AwaitingOtherCitizenship(OnlyLatin, OnlyCyrillic),
    AwaitingArrivalDate(OnlyLatin, OnlyCyrillic, Citizenship),
}

pub type RegistrationDialogue = Dialogue<RegistrationState, InMemStorage<RegistrationState>>;

async fn handle_start_command(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
    use_case: CheckRegisteredUseCase,
) -> HandlerResult {
    let registered = use_case.is_registered(UserID::new(msg.chat.id.0)).await?;
    if registered {
        bot.send_message(
            msg.chat.id,
            "üîπ <b>–£–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\
            –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\
            /view ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ;\n\
            /update ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ;\n\
            /reserve ‚Äì –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É.",
        )
        .parse_mode(ParseMode::Html)
        .await?;
        return Ok(());
    }

    bot.send_message(msg.chat.id,
         "üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å</b>!\n\
          –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å 152-–§–ó –†–§."
    )
        .parse_mode(ParseMode::Html)
        .reply_markup(make_agreement_keyboard())
        .await?;
    dialogue
        .update(RegistrationState::AwaitingPDAgreement)
        .await?;
    Ok(())
}

async fn receive_pd_agreement(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
) -> HandlerResult {
    match msg.text() {
        Some(text) => {
            if text == AGREEMENT_BTN {
                bot.send_message(
                    msg.chat.id,
                    "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ª–∞—Ç–∏–Ω–∏—Ü–µ–π</b>\n\
                     –ü—Ä–∏–º–µ—Ä: <i>Ivanov Ivan Ivanovich</i>",
                )
                .parse_mode(ParseMode::Html)
                .await?;
                dialogue
                    .update(RegistrationState::AwaitingFullNameLat)
                    .await?;
            } else {
                bot.send_message(
                    msg.chat.id,
                    "‚ö†Ô∏è <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ!</b>\n\
                     –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
                )
                    .parse_mode(ParseMode::Html)
                .reply_markup(make_agreement_keyboard())
                .await?;
            }
        }
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .reply_markup(make_agreement_keyboard())
                .await?;
        }
    }
    Ok(())
}

async fn receive_full_name_lat(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
) -> HandlerResult {
    match msg.text() {
        Some(text) => match OnlyLatin::new(text) {
            Ok(name) => {
                bot.send_message(
                    msg.chat.id,
                    "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π</b>\n\
                     –ü—Ä–∏–º–µ—Ä: <i>–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á</i>",
                )
                .await?;
                dialogue
                    .update(RegistrationState::AwaitingFullNameCyr(name))
                    .await?;
            }
            Err(_) => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                     –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                .parse_mode(ParseMode::Html)
                .await?;
            }
        },
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
        }
    }
    Ok(())
}

async fn receive_full_name_cyr(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
    full_name_lat: OnlyLatin,
) -> HandlerResult {
    match msg.text() {
        Some(text) => match OnlyCyrillic::new(text) {
            Ok(full_name_cyr) => {
                let keyboard = make_citizenship_keyboard();
                bot.send_message(msg.chat.id, "üåç <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</b>")
                    .parse_mode(ParseMode::Html)
                    .reply_markup(keyboard)
                    .await?;
                dialogue
                    .update(RegistrationState::AwaitingCitizenship(
                        full_name_lat,
                        full_name_cyr,
                    ))
                    .await?;
            }
            Err(_) => {
                bot.send_message(
                    msg.chat.id,
                    "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                     –î–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                )
                .parse_mode(ParseMode::Html)
                .await?;
            }
        },
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
        }
    }
    Ok(())
}

async fn receive_citizenship(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
    (full_name_lat, full_name_cyr): (OnlyLatin, OnlyCyrillic),
) -> HandlerResult {
    let text = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(
                msg.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞.",
            )
            .parse_mode(ParseMode::Html)
            .await?;
            return Ok(());
        }
    };

    let citizenship = match text {
        "–¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω" => Citizenship::Tajikistan,
        "–£–∑–±–µ–∫–∏—Å—Ç–∞–Ω" => Citizenship::Uzbekistan,
        "–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω" => Citizenship::Kazakhstan,
        "–ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω" => Citizenship::Kyrgyzstan,
        "–ê—Ä–º–µ–Ω–∏—è" => Citizenship::Armenia,
        "–ë–µ–ª–∞—Ä—É—Å—å" => Citizenship::Belarus,
        "–£–∫—Ä–∞–∏–Ω–∞" => Citizenship::Ukraine,
        "–î—Ä—É–≥–æ–µ" => {
            bot.send_message(msg.chat.id, "üåç <b>–í–≤–µ–¥–∏—Ç–µ –≥—Ä–∞–∂–¥–∞–Ω—Å—Ç–≤–æ</b>")
                .parse_mode(ParseMode::Html)
                .await?;
            dialogue
                .update(RegistrationState::AwaitingOtherCitizenship(
                    full_name_lat,
                    full_name_cyr,
                ))
                .await?;
            return Ok(());
        }
        _ => {
            bot.send_message(
                msg.chat.id,
                "‚ùå <b>–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞</b>\n\
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞.",
            )
            .parse_mode(ParseMode::Html)
            .await?;
            return Ok(());
        }
    };

    bot.send_message(
        msg.chat.id,
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è</b>\n\
        –í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
    )
    .parse_mode(ParseMode::Html)
    .await?;
    dialogue
        .update(RegistrationState::AwaitingArrivalDate(
            full_name_lat,
            full_name_cyr,
            citizenship,
        ))
        .await?;
    Ok(())
}

async fn receive_other_citizenship(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
    (full_name_lat, full_name_cyr): (OnlyLatin, OnlyCyrillic),
) -> HandlerResult {
    let other = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
            return Ok(());
        }
    };
    let citizenship = Citizenship::Other(other.to_string());
    bot.send_message(
        msg.chat.id,
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø—Ä–∏–±—ã—Ç–∏—è</b>\n\
        –í —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì",
    )
    .parse_mode(ParseMode::Html)
    .await?;
    dialogue
        .update(RegistrationState::AwaitingArrivalDate(
            full_name_lat,
            full_name_cyr,
            citizenship,
        ))
        .await?;
    Ok(())
}

async fn receive_arrival_date(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
    (full_name_lat, full_name_cyr, citizenship): (OnlyLatin, OnlyCyrillic, Citizenship),
    use_case: RegisterUserUseCase,
) -> HandlerResult {
    let date_str = match msg.text() {
        Some(t) => t,
        None => {
            bot.send_message(msg.chat.id, "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                .await?;
            return Ok(());
        }
    };

    match NaiveDate::parse_from_str(date_str, "%d.%m.%Y") {
        Ok(arrival_date) => {
            let user = RegisterUserRequest {
                id: UserID::new(msg.chat.id.0),
                username: Username::new(msg.chat.username().unwrap_or_default().to_string()),
                full_name_lat,
                full_name_cyr,
                citizenship,
                arrival_date,
            };
            match use_case.register(user).await {
                Ok(_) => {
                    bot.send_message(
                        msg.chat.id,
                        "üéâ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\
                        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\
                        /view ‚Äì –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ\n\
                        /update ‚Äì –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ;\n\
                        /reserve ‚Äì –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É.",
                    )
                    .parse_mode(ParseMode::Html)
                    .await?;
                }
                Err(e) => {
                    bot.send_message(
                        msg.chat.id,
                        format!(
                            "‚ùå <b>–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!</b>\n\
                            {}",
                            e
                        ),
                    )
                    .parse_mode(ParseMode::Html)
                    .await?;
                }
            }
            dialogue.exit().await?;
        }
        Err(_) => {
            bot.send_message(
                msg.chat.id,
                "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\
                –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì.",
            )
            .parse_mode(ParseMode::Html)
            .await?;
        }
    }
    Ok(())
}

async fn handle_cancel_command(
    bot: Bot,
    msg: Message,
    dialogue: RegistrationDialogue,
) -> HandlerResult {
    bot.send_message(msg.chat.id, "üö´ –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        .reply_markup(KeyboardRemove::new())
        .await?;
    dialogue.exit().await?;
    Ok(())
}

pub fn registration_schema() -> UpdateHandler<Error> {
    use dptree::case;

    let command_handler = teloxide::filter_command::<RegistrationCommand, _>()
        .branch(case![RegistrationCommand::Start].endpoint(handle_start_command))
        .branch(case![RegistrationCommand::Cancel].endpoint(handle_cancel_command));

    let message_handler = Update::filter_message()
        .branch(command_handler)
        .branch(case![RegistrationState::AwaitingPDAgreement].endpoint(receive_pd_agreement))
        .branch(case![RegistrationState::AwaitingFullNameLat].endpoint(receive_full_name_lat))
        .branch(
            case![RegistrationState::AwaitingFullNameCyr(full_name_lat)]
                .endpoint(receive_full_name_cyr),
        )
        .branch(
            case![RegistrationState::AwaitingCitizenship(
                full_name_lat,
                full_name_cyr
            )]
            .endpoint(receive_citizenship),
        )
        .branch(
            case![RegistrationState::AwaitingOtherCitizenship(
                full_name_lat,
                full_name_cyr
            )]
            .endpoint(receive_other_citizenship),
        )
        .branch(
            case![RegistrationState::AwaitingArrivalDate(
                full_name_lat,
                full_name_cyr,
                citizenship
            )]
            .endpoint(receive_arrival_date),
        );

    dialogue::enter::<Update, InMemStorage<RegistrationState>, RegistrationState, _>()
        .branch(message_handler)
}
